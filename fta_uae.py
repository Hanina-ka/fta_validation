# -*- coding: utf-8 -*-
"""fta_uae.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jw_-e825P5r21rqSfFQ4nRKuwsvyTvjO
"""


# --- Streamlit App ---
import streamlit as st
import pdfplumber
import re
from datetime import datetime
import pandas as pd

# -------------------------------
# Helper Functions
# -------------------------------

def validate_invoice(pdf_file):
    text = ""
    with pdfplumber.open(pdf_file) as pdf:
        for page in pdf.pages:
            page_text = page.extract_text()
            if page_text:
                text += page_text + "\n"

    # Initialize result
    result = {
        "Invoice Name": pdf_file.name,
        "Invoice Type": None,
        "Supplier TRN": None,
        "Invoice Number": None,
        "Invoice Date": None,
        "Total Amount": None,
        "VAT Rate": None,
        "VAT Amount": None,
        "Currency": None,
        "FTA Status": "Approved",
        "Remarks": []
    }

    # --- Checks ---
    # 1. Invoice Type
    if "tax invoice" in text.lower():
        result["Invoice Type"] = "Tax Invoice"
    else:
        result["Invoice Type"] = "Simplified Tax Invoice"
        result["FTA Status"] = "Not Approved"
        result["Remarks"].append("Missing 'Tax Invoice' label")

    # 2. Supplier TRN
    trn_match = re.search(r'100\s*\d{3}\s*\d{3}\s*\d{3}\s*\d{3}', text.replace("\xa0", ""))
    if trn_match:
        result["Supplier TRN"] = re.sub(r'\s+', '', trn_match.group())  # remove spaces

    else:
        result["FTA Status"] = "Not Approved"
        result["Remarks"].append("Invalid or missing Supplier TRN")

    # 3. Invoice Number
    invoice_number_match = re.search(r'Invoice\s*No[:\s]*([A-Za-z0-9\-]+)', text, re.IGNORECASE)
    if invoice_number_match:
        result["Invoice Number"] = invoice_number_match.group(1)
    else:
        result["FTA Status"] = "Not Approved"
        result["Remarks"].append("Invoice number missing")

    # 4. Invoice Date
    date_match = re.search(r'\d{2}[-/]\d{2}[-/]\d{4}', text)
    if date_match:
        result["Invoice Date"] = date_match.group()
        try:
            inv_date = datetime.strptime(result["Invoice Date"], "%d-%m-%Y")
            if inv_date > datetime.now():
                result["FTA Status"] = "Not Approved"
                result["Remarks"].append("Invoice date is in the future")
        except:
            result["FTA Status"] = "Not Approved"
            result["Remarks"].append("Invalid date format")
    else:
        result["FTA Status"] = "Not Approved"
        result["Remarks"].append("Invoice date missing")

    # 5. Currency
    currency_match = re.search(r'AED', text)
    if currency_match:
        result["Currency"] = "AED"
    else:
        result["FTA Status"] = "Not Approved"
        result["Remarks"].append("Currency not AED")

    # 6. VAT Rate & Amount
    vat_rate_match = re.search(r'\b5\s?%', text)
    vat_amount_match = re.search(r'VAT\s*[:=]?\s*AED?\s*(\d+(\.\d{2})?)', text)
    total_amount_match = re.search(r'Total\s*[:=]?\s*AED?\s*(\d+(\.\d{2})?)', text)

    if vat_rate_match:
        result["VAT Rate"] = vat_rate_match.group()
    else:
        result["FTA Status"] = "Not Approved"
        result["Remarks"].append("VAT rate missing")

    if vat_amount_match:
        result["VAT Amount"] = float(vat_amount_match.group(1))
    if total_amount_match:
        result["Total Amount"] = float(total_amount_match.group(1))

    if result["VAT Amount"] and result["Total Amount"]:
        expected_vat = round(result["Total Amount"] * 0.05, 2)
        if abs(expected_vat - result["VAT Amount"]) > 0.5:
            result["FTA Status"] = "Not Approved"
            result["Remarks"].append("VAT calculation mismatch")

    if not result["Remarks"]:
        result["Remarks"] = ["All checks passed"]
    else:
        result["Remarks"] = result["Remarks"]

    return result

# -------------------------------
# Streamlit UI
# -------------------------------

st.set_page_config(page_title="FTA Invoice Validator", layout="wide")
st.title("ðŸ“„ FTA Invoice Validator")
st.write("Upload one or multiple invoice PDFs to validate against FTA rules.")

# Upload PDFs
uploaded_files = st.file_uploader(
    "Upload Invoice PDFs",
    type="pdf",
    accept_multiple_files=True
)

if uploaded_files:
    results = []
    for pdf_file in uploaded_files:
        results.append(validate_invoice(pdf_file))

    df = pd.DataFrame(results)
    st.dataframe(df)

    # Save to Excel
    output_file = "FTA_Validation_Results.xlsx"
    df.to_excel(output_file, index=False)

    # Download button
    with open(output_file, "rb") as f:
        st.download_button(
            label="ðŸ“¥ Download Excel",
            data=f,
            file_name=output_file
        )

# Clear Button
if st.button("ðŸ—‘ Clear Results"):
    st.experimental_rerun()
